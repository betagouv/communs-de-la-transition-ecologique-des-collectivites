/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/communes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche des communes */
    get: {
      parameters: {
        query?: {
          /** @description Code postal associé */
          codePostal?: string;
          /** @description Latitude (en degrés) */
          lat?: number;
          /** @description Longitude (en degrés) */
          lon?: number;
          /** @description Nom de la commune */
          nom?: string;
          /** @description Mode de boost de la recherche par nom */
          boost?: string;
          /** @description Code de la commune */
          code?: string;
          /** @description Code SIREN de la commune */
          siren?: string;
          /** @description Code de l'EPCI associé */
          codeEpci?: string;
          /** @description Code du département associé */
          codeDepartement?: string;
          /** @description Code de la région associée */
          codeRegion?: string;
          /** @description Code de la commune si on a un arrondissement */
          codeParent?: string;
          /** @description Code INSEE ancien de la commune */
          ancienCode?: string;
          /** @description Zone permettant de filtrer à la métropole, aux DROM et aux COM. Défaut à metro,drom sauf pour les communes à metro,drom,com pour conserver le comportement historique. */
          zone?: components["parameters"]["zoneParam"];
          /** @description Type permettant de filtrer si on retourne les communes, les arrondissements ou les 2. Par défaut à commune-actuelle. */
          type?: components["parameters"]["typeCommune"];
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["communeFieldsParam"];
          /** @description Format de réponse attendu */
          format?: components["parameters"]["formatParam"];
          /** @description Géométrie à utiliser pour la sortie géographique */
          geometry?: components["parameters"]["communeGeometryParam"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Liste de communes */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Commune"][];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/communes/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Récupérer les informations concernant une commune */
    get: {
      parameters: {
        query?: {
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["communeFieldsParam"];
          /** @description Format de réponse attendu */
          format?: components["parameters"]["formatParam"];
          /** @description Géométrie à utiliser pour la sortie géographique */
          geometry?: components["parameters"]["communeGeometryParam"];
        };
        header?: never;
        path: {
          /** @description Code INSEE de la commune */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Informations concernant une commune */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Commune"];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Commune introuvable */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/communes_associees_deleguees": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche des communes associées et/ou déléguées */
    get: {
      parameters: {
        query?: {
          /** @description Latitude (en degrés) */
          lat?: number;
          /** @description Longitude (en degrés) */
          lon?: number;
          /** @description Nom de la commune */
          nom?: string;
          /** @description Code de la commune */
          code?: string;
          /** @description Code de l'EPCI associé */
          codeEpci?: string;
          /** @description Code du département associé */
          codeDepartement?: string;
          /** @description Code de la région associée */
          codeRegion?: string;
          /** @description Type permettant de filtrer si on retourne les communes, les arrondissements ou les 2. Par défaut à commune-actuelle. */
          type?: components["parameters"]["typeCommuneAssocieeDeleguee"];
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["communeAssocieeDelegueeFieldsParam"];
          /** @description Format de réponse attendu */
          format?: components["parameters"]["formatParam"];
          /** @description Géométrie à utiliser pour la sortie géographique */
          geometry?: components["parameters"]["communeAssocieeDelegueeGeometryParam"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Liste de communes associées et/ou déléguées */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Commune"][];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/communes_associees_deleguees/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Récupérer les informations concernant une commune associée ou déléguée */
    get: {
      parameters: {
        query?: {
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["communeAssocieeDelegueeFieldsParam"];
          /** @description Format de réponse attendu */
          format?: components["parameters"]["formatParam"];
          /** @description Géométrie à utiliser pour la sortie géographique */
          geometry?: components["parameters"]["communeAssocieeDelegueeGeometryParam"];
        };
        header?: never;
        path: {
          /** @description Code INSEE de la commune associée ou déléguée */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Informations concernant une commune associée ou déléguée */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Commune"];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Commune associée ou déléguée introuvable */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/epcis": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche des EPCI */
    get: {
      parameters: {
        query?: {
          /** @description Nom de l'EPCI */
          nom?: string;
          /** @description Mode de boost de la recherche par nom */
          boost?: string;
          /** @description Code de l'EPCI associé */
          codeEpci?: string;
          /** @description Code du département associé */
          codeDepartement?: string;
          /** @description Code de la région associée */
          codeRegion?: string;
          /** @description Zone permettant de filtrer à la métropole, aux DROM et aux COM. Défaut à metro,drom sauf pour les communes à metro,drom,com pour conserver le comportement historique. */
          zone?: components["parameters"]["zoneParam"];
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["epciFieldsParam"];
          /** @description Format de réponse attendu */
          format?: components["parameters"]["formatParam"];
          /** @description Géométrie à utiliser pour la sortie géographique */
          geometry?: components["parameters"]["epciGeometryParam"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Liste des EPCI */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Epci"][];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/epcis/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Récupérer les informations concernant un EPCI */
    get: {
      parameters: {
        query?: {
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["epciFieldsParam"];
          /** @description Format de réponse attendu */
          format?: components["parameters"]["formatParam"];
          /** @description Géométrie à utiliser pour la sortie géographique */
          geometry?: components["parameters"]["epciGeometryParam"];
        };
        header?: never;
        path: {
          /** @description Code INSEE de l'EPCI */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Informations concernant une commune */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Epci"];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description EPCI introuvable */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/epcis/{code}/communes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Renvoi les communes d'un EPCI */
    get: {
      parameters: {
        query?: {
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["communeFieldsParam"];
          /** @description Format de réponse attendu */
          format?: components["parameters"]["formatParam"];
          /** @description Géométrie à utiliser pour la sortie géographique */
          geometry?: components["parameters"]["communeGeometryParam"];
        };
        header?: never;
        path: {
          /** @description Code de l'EPCI */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Liste des communes de l'EPCI */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Commune"][];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description EPCI introuvable */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/departements": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche des départements */
    get: {
      parameters: {
        query?: {
          /** @description Code du département */
          code?: string;
          /** @description Code région associé */
          codeRegion?: string;
          /** @description Nom du département */
          nom?: string;
          /** @description Zone permettant de filtrer à la métropole, aux DROM et aux COM. Défaut à metro,drom sauf pour les communes à metro,drom,com pour conserver le comportement historique. */
          zone?: components["parameters"]["zoneParam"];
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["departementFieldsParam"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Le ou les départements */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Departement"][];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/departements/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Récupérer les informations concernant un département */
    get: {
      parameters: {
        query?: {
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["departementFieldsParam"];
        };
        header?: never;
        path: {
          /** @description Code du département */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Informations concernant un département */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Departement"];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Département introuvable */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/departements/{code}/communes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Renvoi les communes d'un département */
    get: {
      parameters: {
        query?: {
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["communeFieldsParam"];
          /** @description Format de réponse attendu */
          format?: components["parameters"]["formatParam"];
          /** @description Géométrie à utiliser pour la sortie géographique */
          geometry?: components["parameters"]["communeGeometryParam"];
        };
        header?: never;
        path: {
          /** @description Code du département */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Liste des communes du département */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Commune"][];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Département introuvable */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/regions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Recherche des régions */
    get: {
      parameters: {
        query?: {
          /** @description Code de la région */
          code?: string;
          /** @description Nom de la région */
          nom?: string;
          /** @description Zone permettant de filtrer à la métropole, aux DROM et aux COM. Défaut à metro,drom sauf pour les communes à metro,drom,com pour conserver le comportement historique. */
          zone?: components["parameters"]["zoneParam"];
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["regionFieldsParam"];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description La ou les régions */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Region"][];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/regions/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Récupérer les informations concernant une région */
    get: {
      parameters: {
        query?: {
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["regionFieldsParam"];
        };
        header?: never;
        path: {
          /** @description Code de la région */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Informations concernant la région */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Region"];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Région introuvable */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/regions/{code}/departements": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Renvoi les départements d'une région */
    get: {
      parameters: {
        query?: {
          /** @description Liste des champs souhaités dans la réponse */
          fields?: components["parameters"]["regionFieldsParam"];
        };
        header?: never;
        path: {
          /** @description Code de la région */
          code: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Liste des départements de la région */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Departement"][];
          };
        };
        /** @description Erreur. Requête mal formée */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Département introuvable */
        404: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Error: {
      /** @description Code HTTP de l'erreur */
      code?: number;
      /** @description Libellé de l'erreur */
      message?: string;
      /** @description Explication */
      description?: string;
    };
    Commune: {
      /** @description Code INSEE de la commune */
      code?: string;
      /** @description Nom de la commune */
      nom?: string;
      /** @description Liste des codes postaux associés à la commune */
      codesPostaux?: string[];
      /** @description Code SIREN de la commune */
      siren?: string;
      /** @description Code de l'EPCI associé à la commune */
      codeEpci?: string;
      /** @description Code du département associé à la commune */
      codeDepartement?: string;
      /** @description Code de la région associée à la commune */
      codeRegion?: string;
      epci?: components["schemas"]["Epci"];
      departement?: components["schemas"]["Departement"];
      region?: components["schemas"]["Region"];
      /** @description Liste des codes postaux associés à la commune */
      associees?: {
        code?: string;
        nom?: string;
      }[];
      /** @description Liste des codes postaux associés à la commune */
      deleguees?: {
        code?: string;
        nom?: string;
      }[];
      /** @description Population municipale */
      population?: number;
      /** @description Liste des anciens codes INSEE associés à la commune */
      anciensCodes?: string[];
      /**
       * Format: float
       * @description Surface de la commune, en hectares
       */
      surface?: number;
      /** @description Centre de la commune (Point GeoJSON) */
      centre?: Record<string, never>;
      /** @description Contour de la commune (Polygon GeoJSON) */
      contour?: Record<string, never>;
      /** @description Mairie principale de la commune (Point GeoJSON). Pour les COM et les communes mortes pour la France, on retourne le centre. */
      mairie?: Record<string, never>;
      /** @description Rectangle englobant la commune (Polygon GeoJSON) */
      bbox?: Record<string, never>;
    };
    CommuneAssocieeDeleguee: {
      /** @description Code INSEE de la commune associée ou déléguée */
      code?: string;
      /** @description Nom de la commune associée ou déléguée */
      nom?: string;
      /** @description Code de l'EPCI associé à la commune associée ou déléguée */
      codeEpci?: string;
      /** @description Code du département associé à la commune associée ou déléguée */
      codeDepartement?: string;
      /** @description Code de la région associée à la commune associée ou déléguée */
      codeRegion?: string;
      epci?: components["schemas"]["Epci"];
      departement?: components["schemas"]["Departement"];
      region?: components["schemas"]["Region"];
      /**
       * Format: float
       * @description Surface de la commune associée ou déléguée, en hectares
       */
      surface?: number;
      /** @description Centre de la commune associée ou déléguée (Point GeoJSON) */
      centre?: Record<string, never>;
      /** @description Contour de la commune associée ou déléguée (Polygon GeoJSON) */
      contour?: Record<string, never>;
      /** @description Rectangle englobant la commune associée ou déléguée (Polygon GeoJSON) */
      bbox?: Record<string, never>;
    };
    Epci: {
      /** @description Code SIREN de l'EPCI */
      code?: string;
      /** @description Nom de l'EPCI */
      nom?: string;
      /** @description Type de l'EPCI, soit communauté d'agglomération (CA), soit communauté de communes (CC), soit communauté urbaine (CU), soit métropole de Lyon (MET69), soit métropole (METRO) */
      type?: string;
      /** @description Financement de l'EPCI, soit fiscalité additionnelle (FA), soit en fiscalité professionnelle unique (FPU) */
      financement?: string;
      /** @description Liste des départements de l'EPCI */
      codesDepartements?: string[];
      /** @description Liste des régions de l'EPCI */
      codesRegions?: string[];
      /** @description Population municipale */
      population?: number;
      /**
       * Format: float
       * @description Surface de l'EPCI, en hectares
       */
      surface?: number;
      /** @description Centre de l'EPCI (Point GeoJSON) */
      centre?: Record<string, never>;
      /** @description Contour de l'EPCI (Polygon GeoJSON) */
      contour?: Record<string, never>;
      /** @description Rectangle englobant la commune (Polygon GeoJSON) */
      bbox?: Record<string, never>;
    };
    Departement: {
      /** @description Code du département */
      code?: string;
      /** @description Nom du département */
      nom?: string;
      /** @description Code de la région */
      codeRegion?: string;
      region?: components["schemas"]["Region"];
    };
    Region: {
      /** @description Code de la région */
      code?: string;
      /** @description Nom de la région */
      nom?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description Liste des champs souhaités dans la réponse */
    communeFieldsParam: (
      | "nom"
      | "code"
      | "codeParent"
      | "codesPostaux"
      | "siren"
      | "centre"
      | "surface"
      | "contour"
      | "mairie"
      | "bbox"
      | "codeEpci"
      | "epci"
      | "codeDepartement"
      | "departement"
      | "codeRegion"
      | "region"
      | "population"
      | "anciensCodes"
      | "deleguees"
      | "associees"
      | "zone"
    )[];
    /** @description Liste des champs souhaités dans la réponse */
    communeAssocieeDelegueeFieldsParam: (
      | "nom"
      | "code"
      | "type"
      | "chefLieu"
      | "centre"
      | "surface"
      | "contour"
      | "bbox"
      | "codeEpci"
      | "epci"
      | "codeDepartement"
      | "departement"
      | "codeRegion"
      | "region"
    )[];
    /** @description Liste des champs souhaités dans la réponse */
    epciFieldsParam: (
      | "nom"
      | "code"
      | "population"
      | "financement"
      | "type"
      | "codesRegions"
      | "codesDepartements"
      | "centre"
      | "surface"
      | "contour"
      | "bbox"
      | "zone"
    )[];
    /** @description Liste des champs souhaités dans la réponse */
    departementFieldsParam: ("nom" | "code" | "codeRegion" | "region" | "zone" | "chefLieu")[];
    /** @description Liste des champs souhaités dans la réponse */
    regionFieldsParam: ("nom" | "code" | "zone" | "chefLieu")[];
    /** @description Format de réponse attendu */
    formatParam: "json" | "geojson";
    /** @description Géométrie à utiliser pour la sortie géographique */
    communeGeometryParam: "centre" | "contour" | "mairie" | "bbox";
    /** @description Géométrie à utiliser pour la sortie géographique */
    communeAssocieeDelegueeGeometryParam: "centre" | "contour" | "bbox";
    /** @description Type permettant de filtrer si on retourne les communes, les arrondissements ou les 2. Par défaut à commune-actuelle. */
    typeCommune: ("commune-actuelle" | "arrondissement-municipal")[];
    /** @description Type permettant de filtrer si on retourne les communes, les arrondissements ou les 2. Par défaut à commune-actuelle. */
    typeCommuneAssocieeDeleguee: ("commune-associee" | "commune-deleguee")[];
    /** @description Zone permettant de filtrer à la métropole, aux DROM et aux COM. Défaut à metro,drom sauf pour les communes à metro,drom,com pour conserver le comportement historique. */
    zoneParam: ("metro" | "drom" | "com")[];
    /** @description Géométrie à utiliser pour la sortie géographique */
    epciGeometryParam: "centre" | "contour" | "bbox";
    /** @description Nombre d'éléments à retourner */
    limitParam: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
